[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ggplot2",
    "section": "",
    "text": "A ggplot2 is initiated by the ggplot() command. When called on its own, it produces a graph without any data points. It is used to define options that will be forwarded to the functions responsible for adding data.\nA ggplot consists of layers that add graphical elements to the final plot. Layers are functions that begin with geom_ and define the type of plot. Examples are geom_point and geom_col, which create scatter and bar plots, respectively.\nThe general structure is as follows\nggplot() +\n  geom_\n\n\nThe data to be plotted can be provided in either the ggplot() function, which will forward it to the geom_ functions, or in the geom_ functions directly. In either way, the data.frame containing the data is specified as an argument directly, while the mapping function aes() contains information on which columns of the data.frame belong to which variable.\nggplot(data.frame, aes(x = independent.variable, y = dependent.variable)) +\n  geom_scatter()\nUsing the iris dataset, plotting the Sepal.Width against Sepal.Length works as follows\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point()\n\n\n\n\n\n\n\nIt is necessary to differentiate between different datasets if they are displayed within the same graph. This can be easily done by assigning factors to data points originating from different datasets. Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example, the confidence intervals and the fitted line of the different datasets are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot &lt;- lm(Sepal.Width ~ Sepal.Length * Species, iris) |&gt;\n                  predict(interval = 'confidence') |&gt;\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, y = Sepal.Width, ymin = lwr, ymax = upr,\n                                       colour = Species, fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  },
  {
    "objectID": "index.html#plotting-data",
    "href": "index.html#plotting-data",
    "title": "ggplot2",
    "section": "Plotting Data",
    "text": "Plotting Data\nThe data to be plotted can be provided in either the ggplot() function, which will forward it to the geom_ functions, or in the geom_ functions directly. In either way, the data.frame containing the data is specified as an argument directly, while the mapping function aes() contains information on which columns of the data.frame belong to which variable.\n\nggplot(data.frame, aes(x = independent.variable, y = dependent.variable)) +\n  geom_point()\n\nUsing the iris dataset, plotting the Sepal.Width against Sepal.Length works as follows\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point()\n\n\n\n\n\nImportant geom_\nThe table below serves as a guide as to which geom_ are useful.\n\n\n\n\n \n  \n    geoms \n    explanation \n    important settings \n  \n \n\n  \n    geom_point \n    plot points \n    size \n  \n  \n    geom_ribbon \n    plot an area between points \n    alpha, linetype \n  \n  \n    geom_col \n    create columns barplot \n    position \n  \n  \n    geom_errorbar \n    plot error bars \n    width \n  \n  \n    geom_hline/_vline \n    plot horizontal/vertical line \n    intercept \n  \n\n\n\n\n\nBelow is a complete list of all available geom_\n\n\n\n\n \n  \n    geom \n  \n \n\n  \n    geom_abline \n  \n  \n    geom_area \n  \n  \n    geom_bar \n  \n  \n    geom_bin_2d \n  \n  \n    geom_bin2d \n  \n  \n    geom_blank \n  \n  \n    geom_boxplot \n  \n  \n    geom_col \n  \n  \n    geom_contour \n  \n  \n    geom_contour_filled \n  \n  \n    geom_count \n  \n  \n    geom_crossbar \n  \n  \n    geom_curve \n  \n  \n    geom_density \n  \n  \n    geom_density_2d \n  \n  \n    geom_density_2d_filled \n  \n  \n    geom_density2d \n  \n  \n    geom_density2d_filled \n  \n  \n    geom_dotplot \n  \n  \n    geom_errorbar \n  \n  \n    geom_errorbarh \n  \n  \n    geom_freqpoly \n  \n  \n    geom_function \n  \n  \n    geom_hex \n  \n  \n    geom_histogram \n  \n  \n    geom_hline \n  \n  \n    geom_jitter \n  \n  \n    geom_kable \n  \n  \n    geom_kable_colnames \n  \n  \n    geom_label \n  \n  \n    geom_line \n  \n  \n    geom_linerange \n  \n  \n    geom_map \n  \n  \n    geom_path \n  \n  \n    geom_point \n  \n  \n    geom_pointrange \n  \n  \n    geom_polygon \n  \n  \n    geom_qq \n  \n  \n    geom_qq_line \n  \n  \n    geom_quantile \n  \n  \n    geom_raster \n  \n  \n    geom_rect \n  \n  \n    geom_ribbon \n  \n  \n    geom_rug \n  \n  \n    geom_segment \n  \n  \n    geom_sf \n  \n  \n    geom_sf_label \n  \n  \n    geom_sf_text \n  \n  \n    geom_smooth \n  \n  \n    geom_spoke \n  \n  \n    geom_step \n  \n  \n    geom_text \n  \n  \n    geom_tile \n  \n  \n    geom_violin \n  \n  \n    geom_vline"
  },
  {
    "objectID": "index.html#using-factors",
    "href": "index.html#using-factors",
    "title": "ggplot2",
    "section": "Using Factors",
    "text": "Using Factors\nIt is necessary to differentiate between different datasets if they are displayed within the same graph. This can be easily done by assigning factors to data points originating from different datasets. Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example, the confidence intervals and the fitted line of the different datasets are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>\n                  predict(interval = 'confidence') |>\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, \n                                       y = Sepal.Width, \n                                       ymin = lwr, \n                                       ymax = upr,\n                                       colour = Species, \n                                       fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  },
  {
    "objectID": "index.html#changing-the-appearance-of-the-plot",
    "href": "index.html#changing-the-appearance-of-the-plot",
    "title": "ggplot2",
    "section": "Changing the Appearance of the Plot",
    "text": "Changing the Appearance of the Plot\nscale_ acts on the appearance of the plot. It can change the way axes are displayed or how colors are applied to the plotted data, for example.\n\nChanging the Axes\nCommon functions to alter the axes are (for the x-axis, replace with y for the y-axis):\n\nscale_x_continuous for continuous values\nscale_x_log10 for log-transforming the axis (not the values themselves)\n\nThey take, among others, the following options:\n\nlimits - range of values plotted\nbreaks - ticks displayed\nexpand - additional space before/after the plotted data\nguide - can add minor ticks, among others\n\n\nlibrary(ggprism)\ng1 <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point()\n\ng2 <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point() +\n  scale_x_continuous(limits = c(8, 16), breaks = seq(8, 16, 1)) + \n  scale_y_log10(guide = 'prism_minor')\n\nplot_grid(g1, g2)\n\n\n\n\n\n\nChanging the Color Palette\nAs seen in SectionÂ 1.2, ggplot2 automatically colors factors specified by color or fill using a pre-defined palette. Two ways of changing the color palette of ggplot exist.\nOne way of changing the color palette is to change it globally via the ggplot2.discrete.colour option in options(). The colors are provided in a character vector as color hex codes.\n\noptions(ggplot2.discrete.colour = c('red', 'blue', 'green'))\n\nColors can also be changed on a per-plot basis using the scales _color_ and _fill_, for which a lot of pre-defined color palettes exist. Providing custom color palettes can be done with _color_manual and _fill_manual, for which the palette needs to be provided in a character vector.\n\nggblack <- rgb(118, 113, 113, maxColorValue = 255) # gray\ngglime <- rgb(140, 198, 63, maxColorValue = 255) # lime\nggred <- rgb(241, 89, 42, maxColorValue = 255) # red\nggturquoise <- rgb(37, 170, 225, maxColorValue = 255) # turqoise\nggpalette <- c(ggblack, gglime, ggred, ggturquoise)\n\ng1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\ng2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point() +\n  scale_color_manual(values = ggpalette)\n\nplot_grid(g1, g2)\n\n\n\n\n\n\nThemes\ntheme_ allows to easily change the appearance of a plot using pre-defined settings. Available themes are:\n\n_gray()\n_bw()\n_linedraw()\n_light()\n_dark()\n_minimal()\n_classic()\n\nThese themes can be further modified, or new themes can be created, using the theme() function.\n\ng1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\ng2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point() +\n  theme_linedraw()\n\nplot_grid(g1, g2)"
  },
  {
    "objectID": "index.html#sec-test",
    "href": "index.html#sec-test",
    "title": "ggplot2",
    "section": "Using Factors",
    "text": "Using Factors\nIt is necessary to differentiate between different datasets if they are displayed within the same graph. This can be easily done by assigning factors to data points originating from different datasets. Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example, the confidence intervals and the fitted line of the different datasets are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>\n                  predict(interval = 'confidence') |>\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, \n                                       y = Sepal.Width, \n                                       ymin = lwr, \n                                       ymax = upr,\n                                       colour = Species, \n                                       fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  },
  {
    "objectID": "index.html#sec-factors",
    "href": "index.html#sec-factors",
    "title": "ggplot2",
    "section": "Using Factors",
    "text": "Using Factors\nIt may be necessary to differentiate between different groups if they are displayed within the same graph. This can be easily done by assigning factors to data points belonging to different groups Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example below, the confidence intervals and the fitted line of the different groups are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>\n                  predict(interval = 'confidence') |>\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, \n                                       y = Sepal.Width, \n                                       ymin = lwr, \n                                       ymax = upr,\n                                       colour = Species, \n                                       fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  },
  {
    "objectID": "index.html#reusing-ggplot2-objects",
    "href": "index.html#reusing-ggplot2-objects",
    "title": "ggplot2",
    "section": "Reusing ggplot2 objects",
    "text": "Reusing ggplot2 objects\nIt may be useful to save several ggplot2 objects like geom_, scale_, and theme_ to use them for multiple plots. This can be achieved by saving the objects in a list and adding it to ggplot() using the + sign.\n\nchanges <- list(\n  geom_point(),\n  theme_linedraw(),\n  ggtitle('title of scatter plot')\n)\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  changes"
  },
  {
    "objectID": "index.html#defining-functions-to-work-with-ggplot2-options",
    "href": "index.html#defining-functions-to-work-with-ggplot2-options",
    "title": "ggplot2",
    "section": "Defining functions to work with ggplot2 options",
    "text": "Defining functions to work with ggplot2 options\nSome options of ggplot2 functions allow a function as their value. The required input values are defined in the help file of the function.\n\nlibrary(stringr) # for str_wrap\n\ndata <- data.frame(description = c(\"a very long text that requires linebreaks\", \n                                   'another text'), \n                   val = c(30, 300))\n\nformat_label <- function(x) str_wrap(x, width = 20)\nformat_breaks <- function(vec) seq(vec[1], vec[2], (vec[2]-vec[1])/5)\n\nggplot(data, aes(x = description, y = val)) +\n  geom_col() +\n  coord_flip() +\n  scale_x_discrete(labels = format_label) +\n  scale_y_continuous(breaks = format_breaks)"
  },
  {
    "objectID": "index.html#important-geom_",
    "href": "index.html#important-geom_",
    "title": "ggplot2",
    "section": "Important geom_",
    "text": "Important geom_\nThe table below serves as a guide as to which geom_ are useful.\n\n\n\n\n \n  \n    geoms \n    explanation \n    important settings \n  \n \n\n  \n    geom_point \n    plot points \n    size \n  \n  \n    geom_ribbon \n    plot an area between points \n    alpha, linetype \n  \n  \n    geom_col \n    create columns barplot \n    position \n  \n  \n    geom_errorbar \n    plot error bars \n    width \n  \n  \n    geom_hline/_vline \n    plot horizontal/vertical line \n    intercept \n  \n\n\n\n\n\nBelow is a complete list of all available geom_\n\n\n\n\n \n  \n    geom \n  \n \n\n  \n    geom_abline \n  \n  \n    geom_area \n  \n  \n    geom_bar \n  \n  \n    geom_bin_2d \n  \n  \n    geom_bin2d \n  \n  \n    geom_blank \n  \n  \n    geom_boxplot \n  \n  \n    geom_col \n  \n  \n    geom_contour \n  \n  \n    geom_contour_filled \n  \n  \n    geom_count \n  \n  \n    geom_crossbar \n  \n  \n    geom_curve \n  \n  \n    geom_density \n  \n  \n    geom_density_2d \n  \n  \n    geom_density_2d_filled \n  \n  \n    geom_density2d \n  \n  \n    geom_density2d_filled \n  \n  \n    geom_dotplot \n  \n  \n    geom_errorbar \n  \n  \n    geom_errorbarh \n  \n  \n    geom_freqpoly \n  \n  \n    geom_function \n  \n  \n    geom_hex \n  \n  \n    geom_histogram \n  \n  \n    geom_hline \n  \n  \n    geom_jitter \n  \n  \n    geom_kable \n  \n  \n    geom_kable_colnames \n  \n  \n    geom_label \n  \n  \n    geom_line \n  \n  \n    geom_linerange \n  \n  \n    geom_map \n  \n  \n    geom_path \n  \n  \n    geom_point \n  \n  \n    geom_pointrange \n  \n  \n    geom_polygon \n  \n  \n    geom_qq \n  \n  \n    geom_qq_line \n  \n  \n    geom_quantile \n  \n  \n    geom_raster \n  \n  \n    geom_rect \n  \n  \n    geom_ribbon \n  \n  \n    geom_rug \n  \n  \n    geom_segment \n  \n  \n    geom_sf \n  \n  \n    geom_sf_label \n  \n  \n    geom_sf_text \n  \n  \n    geom_smooth \n  \n  \n    geom_spoke \n  \n  \n    geom_step \n  \n  \n    geom_text \n  \n  \n    geom_tile \n  \n  \n    geom_violin \n  \n  \n    geom_vline"
  },
  {
    "objectID": "index.html#changing-the-axes",
    "href": "index.html#changing-the-axes",
    "title": "ggplot2",
    "section": "Changing the Axes",
    "text": "Changing the Axes\nCommon functions to alter the axes are (for the x-axis, replace with y for the y-axis):\n\nscale_x_continuous for continuous values\nscale_x_log10 for log-transforming the axis (not the values themselves)\n\nThey take, among others, the following options:\n\nlimits - range of values plotted\nbreaks - ticks displayed\nexpand - additional space before/after the plotted data\nguide - can add minor ticks, among others\n\n\nlibrary(ggprism)\ng1 <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point()\n\ng2 <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point() +\n  scale_x_continuous(limits = c(8, 16), breaks = seq(8, 16, 1)) + \n  scale_y_log10(guide = 'prism_minor')\n\nplot_grid(g1, g2)"
  },
  {
    "objectID": "index.html#changing-the-color-palette",
    "href": "index.html#changing-the-color-palette",
    "title": "ggplot2",
    "section": "Changing the Color Palette",
    "text": "Changing the Color Palette\nAs seen in SectionÂ 3, ggplot2 automatically colors factors specified by color or fill using a pre-defined palette. Two ways of changing the color palette of ggplot exist.\nOne way of changing the color palette is to change it globally via the ggplot2.discrete.colour option in options(). The colors are provided in a character vector by names or color hex codes.\n\noptions(ggplot2.discrete.colour = c('red', 'blue', 'green'))\n\nColors can also be changed on a per-plot basis using the scales _color_ and _fill_, for which a lot of pre-defined color palettes exist. Providing custom color palettes can be done with _color_manual and _fill_manual, for which the palette needs to be provided in a character vector.\n\nggblack <- rgb(118, 113, 113, maxColorValue = 255) # gray\ngglime <- rgb(140, 198, 63, maxColorValue = 255) # lime\nggred <- rgb(241, 89, 42, maxColorValue = 255) # red\nggturquoise <- rgb(37, 170, 225, maxColorValue = 255) # turqoise\nggpalette <- c(ggblack, gglime, ggred, ggturquoise)\n\ng1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\ng2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point() +\n  scale_color_manual(values = ggpalette)\n\nplot_grid(g1, g2)"
  },
  {
    "objectID": "index.html#themes",
    "href": "index.html#themes",
    "title": "ggplot2",
    "section": "Themes",
    "text": "Themes\ntheme_ allows to easily change the appearance of a plot using pre-defined settings. Available themes are:\n\n_gray()\n_bw()\n_linedraw()\n_light()\n_dark()\n_minimal()\n_classic()\n\nThese themes can be further modified, or new themes can be created, using the theme() function.\n\ng1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\ng2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point() +\n  theme_linedraw()\n\nplot_grid(g1, g2)"
  },
  {
    "objectID": "index.html#axes-labels-and-titles",
    "href": "index.html#axes-labels-and-titles",
    "title": "ggplot2",
    "section": "Axes, Labels, and Titles",
    "text": "Axes, Labels, and Titles\nAxes can be labeled using the functions xlab() and ylab(), and a title can be provided by the ggtitle() function. The same can be achieved with the labs() function, which additionally provides subtitles, captions, and legend titles, among other.\n\nggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, colour = Species, pch = Petal.Length > 3)) +\n  geom_point() +\n  labs(\n    title = 'Some General Description',\n    subtitle = 'Maybe some more detailed description',\n    caption = 'This label can be used to indicate the source',\n    pch = 'Change aesthetic \\nname in legend',\n    y = 'Length of Sepal'\n  )"
  }
]