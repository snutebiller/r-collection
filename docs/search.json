[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ggplot2",
    "section": "",
    "text": "A ggplot2 is initiated by the ggplot() command. When called on its own, it produces a graph without any data points. It is used to define options that will be forwarded to the functions responsible for adding data.\nA ggplot consists of layers that add graphical elements to the final plot. Layers are functions that begin with geom_ and define the type of plot. Examples are geom_point and geom_col, which create scatter and bar plots, respectively.\nThe general structure is as follows\nggplot() +\n  geom_\n\n\nThe data to be plotted can be provided in either the ggplot() function, which will forward it to the geom_ functions, or in the geom_ functions directly. In either way, the data.frame containing the data is specified as an argument directly, while the mapping function aes() contains information on which columns of the data.frame belong to which variable.\nggplot(data.frame, aes(x = independent.variable, y = dependent.variable)) +\n  geom_scatter()\nUsing the iris dataset, plotting the Sepal.Width against Sepal.Length works as follows\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point()\n\n\n\n\n\n\n\nIt is necessary to differentiate between different datasets if they are displayed within the same graph. This can be easily done by assigning factors to data points originating from different datasets. Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example, the confidence intervals and the fitted line of the different datasets are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot &lt;- lm(Sepal.Width ~ Sepal.Length * Species, iris) |&gt;\n                  predict(interval = 'confidence') |&gt;\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, y = Sepal.Width, ymin = lwr, ymax = upr,\n                                       colour = Species, fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  },
  {
    "objectID": "index.html#plotting-data",
    "href": "index.html#plotting-data",
    "title": "ggplot2",
    "section": "Plotting Data",
    "text": "Plotting Data\nThe data to be plotted can be provided in either the ggplot() function, which will forward it to the geom_ functions, or in the geom_ functions directly. In either way, the data.frame containing the data is specified as an argument directly, while the mapping function aes() contains information on which columns of the data.frame belong to which variable.\n\nggplot(data.frame, aes(x = independent.variable, y = dependent.variable)) +\n  geom_point()\n\nUsing the iris dataset, plotting the Sepal.Width against Sepal.Length works as follows\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point()\n\n\n\n\n\nImportant _geoms()\nThe table below serves as a guide to which _geoms are useful.\n\n\n\n\n \n  \n    geoms \n    explanation \n    important settings \n  \n \n\n  \n    geom_point \n    plots points \n    size \n  \n  \n    geom_ribbon \n    plots an area between points \n    alpha, linetype \n  \n  \n    geom_col \n    creates columns barplot \n    position \n  \n  \n    geom_errorbar \n    plot error bars \n    width \n  \n  \n    geom_hline/_vline \n    plots horizontal/vertical line \n    intercept"
  },
  {
    "objectID": "index.html#using-factors",
    "href": "index.html#using-factors",
    "title": "ggplot2",
    "section": "Using Factors",
    "text": "Using Factors\nIt is necessary to differentiate between different datasets if they are displayed within the same graph. This can be easily done by assigning factors to data points originating from different datasets. Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example, the confidence intervals and the fitted line of the different datasets are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>\n                  predict(interval = 'confidence') |>\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, \n                                       y = Sepal.Width, \n                                       ymin = lwr, \n                                       ymax = upr,\n                                       colour = Species, \n                                       fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  },
  {
    "objectID": "index.html#changing-the-appearance-of-the-plot",
    "href": "index.html#changing-the-appearance-of-the-plot",
    "title": "ggplot2",
    "section": "Changing the Appearance of the Plot",
    "text": "Changing the Appearance of the Plot\nscale_ act on the appearance of the plot. They can change the way axes are displayed or how colors are applied to the plotted data, for example.\n\nChanging the Axes\nCommon functions to alter the axes are (for the x-axis, replace with y for the y-axis):\n\nscale_x_continuous for continuous values\nscale_x_log10 for log-transforming the axis (not the values themselves)\n\nThey take, among others, the following options:\n\nlimits range of values plotted\nbreaks ticks displayed\nexpand additional space before/after the plotted data\nguide can add minor ticks, among others\n\n\nlibrary(ggprism)\ng1 <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point() +\n  ggtitle(\"g1\")\n\ng2 <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point() +\n  scale_x_continuous(limits = c(8, 16), breaks = seq(8, 16, 1)) + \n  scale_y_log10(guide = 'prism_minor') +\n  ggtitle(\"g2\")\n\nplot_grid(g1, g2)\n\n\n\n\n\n\nChanging the Color Palette\nAs seen in SectionÂ 1.2, ggplot2 automatically colors factors specified by color or fill using a pre-defined palette. To overwrite those standard palettes, the scales _color_ and _fill_ can be used, for which a lot of pre-defined color palettes exist. Providing custom color palettes can be done with _color_manual and _fill_manual, for which the palette needs to be provided in a palette() function. For whatever reason, the assignment of the palette to its variable has to be done twice.\n\nggblack <- rgb(118, 113, 113, maxColorValue = 255) # gray\ngglime <- rgb(140, 198, 63, maxColorValue = 255) # lime\nggred <- rgb(241, 89, 42, maxColorValue = 255) # red\nggturquoise <- rgb(37, 170, 225, maxColorValue = 255) # turqoise\n\nggpalette <- palette(c(ggblack, gglime, ggred, ggturquoise))\nggpalette <- palette(c(ggblack, gglime, ggred, ggturquoise))\n\ng1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\ng2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point() +\n  scale_color_manual(values = ggpalette)\n\nplot_grid(g1, g2)\n\n\n\n\n\n\nThemes"
  },
  {
    "objectID": "index.html#sec-test",
    "href": "index.html#sec-test",
    "title": "ggplot2",
    "section": "Using Factors",
    "text": "Using Factors\nIt is necessary to differentiate between different datasets if they are displayed within the same graph. This can be easily done by assigning factors to data points originating from different datasets. Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example, the confidence intervals and the fitted line of the different datasets are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>\n                  predict(interval = 'confidence') |>\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, \n                                       y = Sepal.Width, \n                                       ymin = lwr, \n                                       ymax = upr,\n                                       colour = Species, \n                                       fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  },
  {
    "objectID": "index.html#sec-factors",
    "href": "index.html#sec-factors",
    "title": "ggplot2",
    "section": "Using Factors",
    "text": "Using Factors\nIt is necessary to differentiate between different datasets if they are displayed within the same graph. This can be easily done by assigning factors to data points originating from different datasets. Using the mappings colour = factor.variable or fill = factor.variable in the aes() function leads to colouring of the data points according to their factor. A legend is added automatically.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n\n\n\nThis is very powerful in settings during which data processing is performed. In the example, the confidence intervals and the fitted line of the different datasets are drawn by the same commands (geom_ribbon() and geom_line(), respectively), while colouring the fit according to the colour mapping and the confidence interval according to the fill mapping.\n\n# fit the data, perform prediction, join the data.frame with the corresponding\n# independent variables\nprediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>\n                  predict(interval = 'confidence') |>\n                    cbind(iris)\n\nggplot(prediction_values_for_plot, aes(x = Sepal.Length, \n                                       y = Sepal.Width, \n                                       ymin = lwr, \n                                       ymax = upr,\n                                       colour = Species, \n                                       fill = Species)) +\n  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +\n  geom_line(aes(y = fit)) +\n  geom_point()"
  }
]