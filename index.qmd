---
title: "ggplot2"
execute:
  echo: true
  warning: false
editor_options: 
  chunk_output_type: console
---
```{r}
#| echo: false
library(ggplot2)
library(knitr)
library(kableExtra)
library(cowplot)
```

# ggplot2 basics
A ggplot2 is initiated by the `ggplot()` command. When called on its own,
it produces a graph without any data points. It is used to define options that
will be forwarded to the functions responsible for adding data.

A `ggplot` consists of layers that add graphical elements to the final plot.
Layers are functions that begin with `geom_` and define the type of plot.
Examples are `geom_point` and `geom_col`, which create scatter and bar plots, respectively.

The general structure is as follows
```{r}
#| eval: false

ggplot() +
  geom_
```

## Plotting Data
The data to be plotted can be provided in either the `ggplot()` function, which will forward it
to the `geom_` functions, or in the `geom_` functions directly. In either way,
the `data.frame` containing the data is specified as an argument directly, while the mapping function
`aes()` contains information on which columns of the `data.frame` belong to which variable.

```{r}
#| eval: false

ggplot(data.frame, aes(x = independent.variable, y = dependent.variable)) +
  geom_point()
```

Using the `iris` dataset, plotting the `Sepal.Width` against `Sepal.Length` works
as follows
```{r}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point()
```

### Important `_geoms()`
```{r}
#| include: false

c_geom <- c(
  "geom_point",
  "geom_ribbon",
  "geom_col",
  "geom_errorbar",
  "geom_hline/_vline"
)

c_geom_expl <- c(
  "plots points",
  "plots an area between points",
  "creates columns barplot",
  "plot error bars",
  "plots horizontal/vertical line"
)

c_geom_imp_settings <- c(
  "size",
  "alpha, linetype",
  "position",
  "width",
  "intercept"
)
geom_kable_colnames <- c(
  "geoms",
  "explanation",
  "important settings"
)
geom_kable <- data.frame(
  geoms = c_geom,
  explanations = c_geom_expl,
  settings = c_geom_imp_settings
) |>
  kable(col.names = geom_kable_colnames) |>
  kable_styling()
```
The table below serves as a guide to which `_geoms` are useful.
```{r}
#| echo: false

geom_kable
```


## Using Factors {#sec-factors}
It is necessary to differentiate between different datasets if they are displayed within
the same graph. This can be easily done by assigning factors to data points originating
from different datasets. Using the mappings `colour = factor.variable` or `fill = factor.variable`
in the `aes()` function leads to colouring of the data points according to their factor.
A legend is added automatically.

```{r}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point()
```

This is very powerful in settings during which data processing is performed. In the
example, the confidence intervals and the fitted line of the different datasets are 
drawn by the same commands (`geom_ribbon()` and `geom_line()`, respectively), 
while colouring the fit according to the `colour` mapping
and the confidence interval according to the `fill` mapping.

```{r}
# fit the data, perform prediction, join the data.frame with the corresponding
# independent variables
prediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>
                  predict(interval = 'confidence') |>
                    cbind(iris)

ggplot(prediction_values_for_plot, aes(x = Sepal.Length, 
                                       y = Sepal.Width, 
                                       ymin = lwr, 
                                       ymax = upr,
                                       colour = Species, 
                                       fill = Species)) +
  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +
  geom_line(aes(y = fit)) +
  geom_point()
```


## Changing the Appearance of the Plot
`scale_` act on the appearance of the plot. They can change the way axes are displayed or how colors are applied to the plotted data, for example.

### Changing the Axes
Common functions to alter the axes are (for the x-axis, replace with y for the y-axis):

- `scale_x_continuous` for continuous values
- `scale_x_log10` for log-transforming the axis (not the values themselves)

They take, among others, the following options:

- `limits` range of values plotted
- `breaks` ticks displayed
- `expand` additional space before/after the plotted data
- `guide` can add minor ticks, among others

```{r}
library(ggprism)
g1 <- ggplot(cars, aes(x = speed, y = dist)) +
  geom_point() +
  ggtitle("g1")

g2 <- ggplot(cars, aes(x = speed, y = dist)) +
  geom_point() +
  scale_x_continuous(limits = c(8, 16), breaks = seq(8, 16, 1)) + 
  scale_y_log10(guide = 'prism_minor') +
  ggtitle("g2")

plot_grid(g1, g2)
```

### Changing the Color Palette
As seen in @sec-factors, ggplot2 automatically colors factors specified by `color` or `fill` using a pre-defined palette. To overwrite those standard palettes, the scales `_color_` and `_fill_` can be used, for which a lot of pre-defined color palettes exist. Providing custom color palettes can be done with `_color_manual` and `_fill_manual`, for which the palette needs to be provided in a `palette()` function. *For whatever reason, the assignment of the palette to its variable has to be done twice*.
```{r}
ggblack <- rgb(118, 113, 113, maxColorValue = 255) # gray
gglime <- rgb(140, 198, 63, maxColorValue = 255) # lime
ggred <- rgb(241, 89, 42, maxColorValue = 255) # red
ggturquoise <- rgb(37, 170, 225, maxColorValue = 255) # turqoise

ggpalette <- palette(c(ggblack, gglime, ggred, ggturquoise))
ggpalette <- palette(c(ggblack, gglime, ggred, ggturquoise))

g1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point()

g2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point() +
  scale_color_manual(values = ggpalette)

plot_grid(g1, g2)
```

### Themes
