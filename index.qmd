---
title: "ggplot2"
execute:
  echo: true
  warning: false
editor_options: 
  chunk_output_type: console
format:
  html:
    fig-align: center
    fig-width: 5
    fig-height: 3
---
```{r}
#| echo: false
library(ggplot2)
library(knitr)
library(kableExtra)
library(cowplot)
```

# ggplot2 basics
A ggplot2 is initiated by the `ggplot()` command. When called on its own,
it produces a graph without any data points. It is used to define options that
will be forwarded to the functions responsible for adding data.

A `ggplot` consists of layers that add graphical elements to the final plot.
Layers are functions that begin with `geom_` and define the type of plot.
Examples are `geom_point` and `geom_col`, which create scatter and bar plots, respectively.

The general structure is as follows
```{r}
#| eval: false

ggplot() +
  geom_
```

# Plotting Data
The data to be plotted can be provided in either the `ggplot()` function, which will forward it
to the `geom_` functions, or in the `geom_` functions directly. In either way,
the `data.frame` containing the data is specified as an argument directly, while the mapping function
`aes()` contains information on which columns of the `data.frame` belong to which variable.

```{r}
#| eval: false

ggplot(data.frame, aes(x = independent.variable, y = dependent.variable)) +
  geom_point()
```

Using the `iris` dataset, plotting the `Sepal.Width` against `Sepal.Length` works
as follows
```{r}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point()
```

Below is a complete list of all available `geom_`
```{r}
#| echo: false
#| tbl-align: center

kable(data.frame('geom' = apropos("geom_")[-c(1,2,length(apropos("geom_")))])) |>
  kable_styling() |>
    scroll_box(height = "400px")
```

# Using Factors {#sec-factors}
It may be necessary to differentiate between different groups if they are displayed within
the same graph. This can be easily done by assigning different factors to data points belonging to different groups. Using the mappings `colour = factor.variable` or `fill = factor.variable`in the `aes()` function leads to colouring of the data points according to their factor. A legend is added automatically.

```{r}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point()
```

This is very powerful in settings during which data processing is performed. In the
example below, the confidence intervals and the fitted line of the different groups are 
drawn by the same commands (`geom_ribbon()` and `geom_line()`, respectively), 
while colouring the fit according to the `colour` mapping
and the confidence interval according to the `fill` mapping.

```{r}
prediction_values_for_plot <- lm(Sepal.Width ~ Sepal.Length * Species, iris) |>
                  predict(interval = 'confidence') |>
                    cbind(iris)

ggplot(prediction_values_for_plot, aes(x = Sepal.Length, 
                                       y = Sepal.Width, 
                                       ymin = lwr, 
                                       ymax = upr,
                                       colour = Species, 
                                       fill = Species)) +
  geom_ribbon(aes(y = fit), alpha = 0.3, linewidth = 0) +
  geom_line(aes(y = fit)) +
  geom_point()
```


# Changing the Appearance of the Plot
`scale_` acts on the appearance of the plot. It can change the way axes are displayed or how colors are applied to the plotted data, for example.

## Changing the Axes
Common functions to alter the axes are (for the x-axis, replace with y for the y-axis):

- `scale_x_continuous` for continuous values
- `scale_x_log10` for log-transforming the axis (not the values themselves)

They take, among others, the following options:

- `limits` - range of values plotted
- `breaks` - ticks displayed
- `expand` - additional space before/after the plotted data
- `guide` - can add minor ticks, among others

```{r}
#| fig-width: 7

library(ggprism)
g1 <- ggplot(cars, aes(x = speed, y = dist)) +
  geom_point()

g2 <- ggplot(cars, aes(x = speed, y = dist)) +
  geom_point() +
  scale_x_continuous(limits = c(8, 16), breaks = seq(8, 16, 1)) + 
  scale_y_log10(guide = 'prism_minor')

plot_grid(g1, g2)
```

## Changing the Color Palette
As seen in @sec-factors, ggplot2 automatically colors factors specified by `color` or `fill` using a pre-defined palette. Two ways of changing the color palette of `ggplot` exist.

One way of changing the color palette is to change it globally via the `ggplot2.discrete.colour` option in `options()`. The colors are provided in a character vector by names or color hex codes.
```{r}
#| eval: false
options(ggplot2.discrete.colour = c('red', 'blue', 'green'))
```


Colors can also be changed on a per-plot basis using the scales `_color_` and `_fill_`, for which a lot of pre-defined color palettes exist. Providing custom color palettes can be done with `_color_manual` and `_fill_manual`, for which the palette needs to be provided in a character vector.
```{r}
#| fig-width: 8

ggblack <- rgb(118, 113, 113, maxColorValue = 255) # gray
gglime <- rgb(140, 198, 63, maxColorValue = 255) # lime
ggred <- rgb(241, 89, 42, maxColorValue = 255) # red
ggturquoise <- rgb(37, 170, 225, maxColorValue = 255) # turqoise
ggpalette <- c(ggblack, gglime, ggred, ggturquoise)

g1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point()

g2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point() +
  scale_color_manual(values = ggpalette)

plot_grid(g1, g2)
```

## Axes, Labels, and Titles
Axes can be labeled using the functions `xlab()` and `ylab()`, and a title can be provided by the `ggtitle()` function. The same can be achieved with the `labs()` function, which additionally provides subtitles, captions, and legend titles, among other.

```{r}

ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, colour = Species, pch = Petal.Length > 3)) +
  geom_point() +
  labs(
    title = 'Some General Description',
    subtitle = 'Maybe some more detailed description',
    caption = 'This label can be used to indicate the source',
    pch = 'Change aesthetic \nname in legend',
    y = 'Length of Sepal'
  )
```



## Themes
`theme_` allows to easily change the appearance of a plot using pre-defined settings. Available themes are:

- `_gray()`
- `_bw()`
- `_linedraw()`
- `_light()`
- `_dark()`
- `_minimal()`
- `_classic()`

These themes can be further modified, or new themes can be created, using the `theme()` function.

```{r}
#| fig-width: 8

g1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point()

g2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  geom_point() +
  theme_linedraw()

plot_grid(g1, g2)
```

# Working with ggplot2 objects and functions

## Reusing ggplot2 objects
It may be useful to save several `ggplot2` objects like `geom_`, `scale_`, and `theme_` to use them for multiple plots. This can be achieved by saving the objects in a `list` and adding it to `ggplot()` using the `+` sign.
```{r}
changes <- list(
  geom_point(),
  theme_linedraw(),
  ggtitle('title of scatter plot')
)

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
  changes
```

## Defining functions to work with ggplot2 options
Some options of `ggplot2` functions allow a function as their value. The required input values are defined in the help file of the function.
```{r}
library(stringr) # for str_wrap

data <- data.frame(description = c("a very long text that requires linebreaks", 
                                   'another text'), 
                   val = c(30, 300))

format_label <- function(x) str_wrap(x, width = 20)
format_breaks <- function(vec) seq(vec[1], vec[2], (vec[2]-vec[1])/5)

ggplot(data, aes(x = description, y = val)) +
  geom_col() +
  coord_flip() +
  scale_x_discrete(labels = format_label) +
  scale_y_continuous(breaks = format_breaks)
```
